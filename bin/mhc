#!/usr/bin/env ruby

require "pp"
require "shellwords"

if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)

require 'rubygems'
require 'bundler/setup'
# Bundler.require
require "mhc"
require "thor"

Encoding.default_external="UTF-8"

class MhcCLI < Thor
  class << self
    attr_accessor :mhcdb
  end

  check_unknown_options!
  package_name 'MHC'

  class_option :repository, :desc => "Set MHC top directory"
  class_option :version, :type => :boolean, :desc => "Show version"
  map ["--version", "-v"] => :version

  default_command :help
  map ["--help", "-h"] => :help

  desc "version", "Show version"
  def version
    puts Mhc::VERSION
  end

  desc "scan RANGE", "Scan schedule in date RANGE"
  long_desc <<-LONGDESC
    scan events in date RANGE.

    RANGE is one of:
    \x5 + START-YYYYMMDD
    \x5 + START[+LENGTH]

    START is one of:
    \x5 + today, tomorrow, sun ... sat, yyyymmdd
    \x5 + thismonth, nextmonth, yyyymm

    LENGTH is a number followed by a SUFFIX. SUFFIX is one of:
    \x5 + d (days)
    \x5 + w (weeks)
    \x5 + m (months)

    If LENGTH is ommited, it is treated as '1d' or '1m' depending on
    which type of START is set.

    Examples:
    \x5 mhc scan 20140101-20141231
    \x5 mhc scan 2140101+3d
    \x5 mhc scan today
    \x5 mhc scan thismonth
  LONGDESC
  method_option :format,   :desc => "Set printing format (text, emacs, ...)"
  method_option :category, :desc => "Pick items only in CATEGORY"
  method_option :subject,  :desc => "Search by Subject string"
  method_option :search,   :desc => "Search by complex expression"
  def scan(range)
    begin
      Mhc::Command::Scan.new(self.class.mhcdb, range, **symbolize_keys(options))
    rescue Mhc::PropertyValue::ParseError, Mhc::FormatterNameError => e
      STDERR.print e.message, "\n"
    end
    return self
  end

  desc "add FILE", "add MHC article to MHC DB"
  def add(file)
    if file == "-"
      puts "Add MHC DB from STDIN"
    end
    if file and File.exists?(file)
      puts "Add file #{file} to MHC DB"
    end
  end

  desc "server", "invoked as Server"
  def server
    while line = STDIN.gets
      argv = line.chomp.shellsplit
      self.class.start(argv)
    end
  end

  no_commands do
    def invoke_command(command, *args)
      setup_global_options
      super
    end
  end

  private
  def setup_global_options
    # self.class.mhcdb ||= MhcScheduleDB.new(options[:repository])
    self.class.mhcdb ||= Mhc::Calendar.new(Mhc::DataStore.new(options[:repository]))
    @mhcdb = self.class.mhcdb
  end

  def symbolize_keys(hash)
    Hash[hash.map {|k,v| [k.to_sym, v]}]
  end
end

begin
  command = MhcCLI.start(ARGV)
rescue ArgumentError => e
  STDERR.print e.message, "\n"
  exit 1
end
